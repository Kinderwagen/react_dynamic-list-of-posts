{"version":3,"sources":["components/Loader/Loader.tsx","utils/fetchClient.ts","components/PostsList.tsx","api/posts.ts","components/NewCommentForm.tsx","api/comments.ts","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","index.tsx"],"names":["Loader","className","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","selectedUserId","selectedPost","onSelectPost","useState","posts","setPosts","isLoading","setIsLoading","error","setError","useEffect","getUserPostsFromServer","a","postsFromServer","length","map","id","title","type","classNames","onClick","postId","openedPost","find","post","handleSelectPost","NewCommentForm","onAddComment","nameInput","setNameInput","emailInput","setEmailInput","commentInput","setCommentInput","nameError","setNameError","emailError","setEmailError","commentError","setCommentError","isAddingComment","setIsAddingComment","postComment","e","preventDefault","trim","newComment","name","email","Error","onSubmit","htmlFor","placeholder","value","onChange","target","getComments","deleteComment","commentId","comment","CommentsList","comments","setComments","loadError","setLoadError","addError","setAddError","deleteError","setDeleteError","isFormVisible","setIsFormVisible","addNewComment","useCallback","addedComment","currentComment","deleteSelectedComment","tempComments","currentComments","filter","fetchPostComments","commentsFromServer","deleteErrorTimer","clearTimeout","addErrorTimer","href","PostDetails","UserSelector","React","memo","users","selectedUser","selectUser","isListOpened","setIsListOpened","selectionRef","useRef","handleSelectUser","userId","foundUser","user","handleClickOutside","event","current","contains","window","addEventListener","removeEventListener","ref","role","App","setUsers","setSelectedUser","setSelectedPost","getUsersFromServer","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03cd9049.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from './Loader';\nimport { Post } from '../types/Post';\nimport { getUserPosts } from '../api/posts';\n\ntype Props = {\n  selectedUserId: number;\n  selectedPost: Post | null;\n  onSelectPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  selectedPost,\n  onSelectPost,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleSelectPost = (postId: number) => {\n    if (selectedPost?.id !== postId) {\n      const openedPost = posts.find(post => post.id === postId) || null;\n\n      onSelectPost(openedPost);\n    } else {\n      onSelectPost(null);\n    }\n  };\n\n  useEffect(() => {\n    const getUserPostsFromServer = async () => {\n      try {\n        onSelectPost(null);\n        setIsLoading(true);\n        setError(false);\n        const postsFromServer = await getUserPosts(selectedUserId);\n\n        setPosts(postsFromServer);\n      } catch {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getUserPostsFromServer();\n  }, [selectedUserId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  }\n\n  if (!posts.length) {\n    return (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(({ id, title }) => (\n            <tr\n              data-cy=\"Post\"\n              key={id}\n            >\n              <td data-cy=\"PostId\">{id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPost?.id !== id },\n                  )}\n                  onClick={() => handleSelectPost(id)}\n                >\n                  {selectedPost?.id === id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { FormEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onAddComment: (commnet: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAddComment }) => {\n  const [nameInput, setNameInput] = useState('');\n  const [emailInput, setEmailInput] = useState('');\n  const [commentInput, setCommentInput] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const errorsCheck = () => {\n    setNameError(!nameInput.trim());\n    setEmailError(!emailInput.trim());\n    setCommentError(!commentInput.trim());\n  };\n\n  const clearAll = () => {\n    setNameError(false);\n    setEmailError(false);\n    setCommentError(false);\n    setNameInput('');\n    setEmailInput('');\n    setCommentInput('');\n  };\n\n  const postComment = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    errorsCheck();\n\n    if (nameInput && emailInput && commentInput) {\n      try {\n        setIsAddingComment(true);\n\n        const newComment = {\n          name: nameInput,\n          email: emailInput,\n          body: commentInput,\n        };\n\n        await onAddComment(newComment);\n      } catch {\n        throw new Error('Can\\'t add new comment');\n      } finally {\n        setIsAddingComment(false);\n        setCommentInput('');\n      }\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={postComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': nameError },\n            )}\n            value={nameInput}\n            onChange={(e) => {\n              setNameInput(e.target.value);\n              setNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': emailError },\n            )}\n            value={emailInput}\n            onChange={(e) => {\n              setEmailInput(e.target.value);\n              setEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': commentError },\n            )}\n            value={commentInput}\n            onChange={(e) => {\n              setCommentInput(e.target.value);\n              setCommentError(false);\n            }}\n          />\n        </div>\n\n        {commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isAddingComment },\n            )}\n\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearAll}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const postComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { deleteComment, getComments, postComment } from '../api/comments';\n\ntype Props = {\n  postId: number;\n};\n\nexport const CommentsList: React.FC<Props> = ({ postId }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadError, setLoadError] = useState(false);\n  const [addError, setAddError] = useState(false);\n  const [deleteError, setDeleteError] = useState(false);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n\n  const addNewComment = useCallback(async (comment: CommentData) => {\n    const newComment = { ...comment, postId };\n\n    try {\n      const addedComment = await postComment(newComment);\n\n      setComments(currentComment => [...currentComment, addedComment]);\n    } catch {\n      setAddError(true);\n    }\n  }, []);\n\n  const deleteSelectedComment = useCallback(async (commentId: number) => {\n    const tempComments = [...comments];\n\n    setComments(currentComments => (\n      currentComments.filter(comment => comment.id !== commentId)\n    ));\n\n    try {\n      setDeleteError(false);\n      await deleteComment(commentId);\n    } catch {\n      setComments(tempComments);\n      setDeleteError(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchPostComments = async () => {\n      try {\n        setComments([]);\n        setIsFormVisible(false);\n        setLoadError(false);\n        setIsLoading(true);\n        const commentsFromServer = await getComments(postId);\n\n        setComments(commentsFromServer);\n      } catch {\n        setLoadError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchPostComments();\n  }, [postId]);\n\n  useEffect(() => {\n    const deleteErrorTimer = setTimeout(() => {\n      setDeleteError(false);\n    }, 3000);\n\n    return () => clearTimeout(deleteErrorTimer);\n  }, [deleteError]);\n\n  useEffect(() => {\n    const addErrorTimer = setTimeout(() => {\n      setAddError(false);\n    }, 3000);\n\n    return () => clearTimeout(addErrorTimer);\n  }, [addError]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (loadError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n        Something went wrong\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {!comments.length\n        ? (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )\n        : (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={comment.id}\n              >\n                <div className=\"message-header\">\n                  <a\n                    href={`mailto:${comment.email}`}\n                    data-cy=\"CommentAuthor\"\n                  >\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteSelectedComment(comment.id)}\n                  />\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n      {addError && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"CommentsError\"\n        >\n          Can&apos;t add new comment\n        </div>\n      )}\n\n      {deleteError && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"CommentsError\"\n        >\n          Can&apos;t delete comment\n        </div>\n      )}\n\n      {!isFormVisible\n        ? (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsFormVisible(true)}\n          >\n            Write a comment\n          </button>\n        )\n        : <NewCommentForm onAddComment={addNewComment} />}\n    </>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const { id, title, body } = post;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          <CommentsList postId={post.id} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  selectUser: (user: User | null) => void;\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  selectedUser,\n  selectUser,\n}) => {\n  const [isListOpened, setIsListOpened] = useState(false);\n  const selectionRef = useRef<HTMLDivElement>(null);\n\n  const handleSelectUser = useCallback((userId: number) => {\n    const foundUser = users.find(user => user.id === userId) || null;\n\n    selectUser(foundUser);\n    setIsListOpened(false);\n  }, [selectUser, users]);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        selectionRef.current\n        && !selectionRef.current.contains(event.target as ChildNode)\n      ) {\n        setIsListOpened(false);\n      }\n    };\n\n    window.addEventListener('click', handleClickOutside);\n\n    return () => window.removeEventListener('click', handleClickOutside);\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isListOpened },\n      )}\n      ref={selectionRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsListOpened(!isListOpened)}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map(({ id, name }) => (\n            <a\n              key={id}\n              href={`#user-${id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': selectedUser?.id === id },\n              )}\n              onClick={() => handleSelectUser(id)}\n            >\n              {name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/users';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const handleSelectUser = useCallback((user) => {\n    setSelectedUser(user);\n  }, []);\n\n  const handleSelectPost = useCallback((post) => {\n    setSelectedPost(post);\n  }, []);\n\n  useEffect(() => {\n    const getUsersFromServer = async () => {\n      try {\n        const usersFromServer = await getUsers();\n\n        setUsers(usersFromServer);\n      } catch {\n        throw new Error('Can\\'t load users');\n      }\n    };\n\n    getUsersFromServer();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  selectUser={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser\n                  ? (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )\n                  : (\n                    <PostsList\n                      selectedUserId={selectedUser.id}\n                      selectedPost={selectedPost}\n                      onSelectPost={handleSelectPost}\n                    />\n                  )}\n\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}